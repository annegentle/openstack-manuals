<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="install-config-keystone"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Installing and Configuring the Identity Service</title>
    <para>First, you need to add a signing key for the
        Cloud Builders repository that contains packages
        that are known and tested to work together, such
        as diablo-d5 or diablo-final. Once you add the
        signing key, you add a repository entry pointing
        to it and update your repo pointer with an apt-get
        command. </para>
    <literallayout class="monospaced">sudo apt-key adv --keyserver hkp://subkeys.pgp.net --recv F87CBDE0</literallayout>
    <literallayout class="monospaced">sudo echo "deb http://ops.rcb.me/packages maverick diablo-final" > /etc/apt/sources.list.d/rcb-sources.list</literallayout>
    
    <para>Install the Identity service:</para>
    <literallayout class="monospaced">apt-get install keystone</literallayout>
    
    <para>After installing, you want to start the service, then delete
        the sqlite database it creates, then change the configuration
        to point to the mysql database. To start up the Identity
        Service (Keystone), enter the following:</para>
    
    <literallayout class="monospaced">cd ~/keystone/bin &amp;&amp; ./keystone </literallayout>
    
    <para>In return you should see something like this:</para>
    <literallayout class="monospaced">Starting the Legacy Authentication component
        Service API listening on 0.0.0.0:5000
        Admin API listening on 0.0.0.0:5001</literallayout>
    <para>Delete the keystone.db file created in the /var/lib/keystone/ directory.</para>
    <para>Configure the production-ready backend data store. Install
        mysql if it's not already available:</para>
    <literallayout class="monospaced">apt-get install python-mysqldb</literallayout>
    <para>For MySQL, create a MySQL database named "keystone" and a
        MySQL user named "keystone". Grant the "keystone" user full
        access to the "keystone" MySQL database.</para>
    <para>Edit /etc/keystone/keystone.conf to include the
        --sql_connection to use the backend data store you just
        created.</para>
    
    <para>Edit /etc/keystone/keystone.conf to use the IP address and
        ports for your environment. Here is an example keystone.conf
        to get you started. 
        
        <literallayout class="monospaced">[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = False

# Show debugging output in logs (sets DEBUG log level output)
debug = False

# Which backend store should Keystone use by default.
# Default: 'sqlite'
# Available choices are 'sqlite' [future will include LDAP, PAM, etc]
default_store = sqlite

# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
log_file = %DEST%/keystone/keystone.log

# List of backends to be configured
backends = keystone.backends.sqlalchemy
#For LDAP support, add: ,keystone.backends.ldap

# Dictionary Maps every service to a header.Missing services would get header
# X_(SERVICE_NAME) Key => Service Name, Value => Header Name
service-header-mappings = {
    'nova' : 'X-Server-Management-Url',
    'swift' : 'X-Storage-Url',
    'cdn' : 'X-CDN-Management-Url'}

    #List of extensions currently loaded.
    #Refer docs for list of supported extensions.
    extensions= osksadm,oskscatalog

# Address to bind the API server
# TODO Properties defined within app not available via pipeline.
service_host = 10.0.2.15

# Port the bind the API server to
service_port = 5000

# Address to bind the Admin API server
admin_host = 10.0.2.15

# Port the bind the Admin API server to
admin_port = 35357

#Role that allows to perform admin operations.
keystone-admin-role = KeystoneAdmin

#Role that allows to perform service admin operations.
keystone-service-admin-role = KeystoneServiceAdmin

[keystone.backends.sqlalchemy]
# SQLAlchemy connection string for the reference implementation registry
# server. Any valid SQLAlchemy connection string is fine.
# See: http://bit.ly/ideIpI
#sql_connection = sqlite:///keystone.db
sql_connection = %SQL_CONN%
backend_entities = ['UserRoleAssociation', 'Endpoints', 'Role', 'Tenant',
                    'User', 'Credentials', 'EndpointTemplates', 'Token',
                    'Service']

# Period in seconds after which SQLAlchemy should reestablish its connection
# to the database.
sql_idle_timeout = 30

[pipeline:admin]
pipeline =
    urlrewritefilter
    admin_api

[pipeline:keystone-legacy-auth]
pipeline =
    urlrewritefilter
    legacy_auth
    RAX-KEY-extension
    service_api

[app:service_api]
paste.app_factory = keystone.server:service_app_factory

[app:admin_api]
paste.app_factory = keystone.server:admin_app_factory

[filter:urlrewritefilter]
paste.filter_factory = keystone.middleware.url:filter_factory

[filter:legacy_auth]
paste.filter_factory = keystone.frontends.legacy_token_auth:filter_factory

[filter:RAX-KEY-extension]
paste.filter_factory = keystone.contrib.extensions.service.raxkey.frontend:filter_factory</literallayout></para>
    <para>Restart the Identity Service. </para>
    <para>Now you add the default tenant, an administrator, and users
        to get a working installation started. The initial tenanta,
        username, and password is openstack, admin, and
        secretword.</para>
    <para>First, add a tenant named
    openstack.</para>
    <literallayout class="monospaced">keystone-manage tenant add openstack</literallayout>
        <para>Now, assign a user and a password to that tenant.</para>
<literallayout class="monospaced">keystone-manage user add admin secretword openstack</literallayout>
        <para>Now add an invented token (any combination of numbers
        and letters will do) to the admin user for the openstack
        tenant and ensure there's an expiration date assigned. This
        one expires in about four years.</para>
<literallayout class="monospaced">keystone-manage token add 11121314151617181920 admin openstack 2015-02-05T00:0 </literallayout>
        <para>Grant the ServiceAdmin role to the admin user.</para>
<literallayout class="monospaced">keystone-manage role add Admin</literallayout> 
        <para>Grant the Admin role to the admin user for the openstack tenant.</para>
        <literallayout class="monospaced">keystone-manage role grant Admin admin</literallayout>
        <para>Grant the Admin role to the admin user for the openstack tenant.</para>
        <literallayout class="monospaced">keystone-manage role grant Admin admin openstack </literallayout>
        <para>Add the Member role so that your tenants can have non-admin users. </para>
<literallayout class="monospaced">keystone-manage role add Member</literallayout> 
        <para>Okay, now that all your starter admins and tenant have
        been created, let's move on to endpoints. </para>
    <para>First add the Identity service, you can name it keystone.
        <literallayout class="monospaced"> keystone-manage service add keystone identity </literallayout></para>
    <para>Now add endpoint templates for the identity service you
        named keystone, which put together the IP addresses, port
        values, and API version number to make an entire endpoint.
        <literallayout> keystone-manage endpointTemplates add RegionOne keystone #{node[:keystone][:publicURL]} #{node[:keystone][:adminURL]} #{node[:keystone][:internalURL]} 1
        1 </literallayout></para>

</section>
