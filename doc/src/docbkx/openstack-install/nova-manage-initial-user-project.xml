<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="setting-up-openstack-compute-environment-on-the-compute-node"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Setting Up OpenStack Compute Environment on the Compute Node</title>
    <para>
        These are the commands you run to ensure the database schema is current, and
        then set up a user and project, if you are using built-in auth with the
        <code>--use_deprecated_auth flag</code> rather than the Identity Service. We'll walk through these to offer a validation step and show that the cloud is accepting commands. 
    </para>
    <para>
        <literallayout class="monospaced">
sudo nova-manage user admin &lt;user_name>
nova-manage project create &lt;project_name> &lt;user_name>
nova-manage network create &lt;network-label> --bridge=&lt;bridgename> &lt;IP-range-of-network-CIDR> &lt;number-of-networks-to-define-for-project> &lt;addresses-in-each-network> 
</literallayout>
    </para>
    <para>Here is an example of what this looks like with real values
        entered and values returned: </para>
    <literallayout class="monospaced">$ sudo nova-manage user admin dub
export EC2_ACCESS_KEY=a42e03c9-656d-4c11-a660-80ed374a4cfb
export EC2_SECRET_KEY=a00a3a32-726a-4e1e-b0c8-24e7df55c959

$ sudo nova-manage project create dubproject dub

$ sudo nova-manage network create novanet --bridge=br100 192.168.100.0/24 1 256 
                </literallayout>
    <para>For this example, the number of IPs is /24 which will be compatible with the ‘--fixed-range’ set in nova.conf. Currently, there can only be
        one network, and this set up would use the max IPs available in a /24. You can
        choose values that let you use any valid amount that you would like. </para>
    <para>The nova-manage service assumes that the first IP address is
        your network (like 192.168.11.0), that the 2nd IP is your
        gateway (192.168.11.1), and that the broadcast is the very
        last IP in the range you defined (192.168.11.255). If this is
        not the case you will need to manually edit the sql db
        ‘networks’ table.o. </para>
    <para>When you run the nova-manage network create command, entries are made
        in the ‘networks’ and ‘fixed_ips’ table. However, one of the networks listed in the
        ‘networks’ table needs to be marked as bridge in order for the code to know that a
        bridge exists. The network in the Nova networks table is marked as bridged
        automatically for Flat Manager.</para>
    <section xml:id="creating-certifications">
        <title>Creating Credentials</title>
        <para>Generate the credentials as a zip file from the project
            creation command. These are the certs you can use to
            launch instances, bundle images, and all the other
            assorted API functions when using "deprecated auth" with
            the -use_deprecated_auth flag set to true (or just
            present) in your nova.conf file. </para>
        <para>
            <literallayout class="monospaced">mkdir –p ~/creds
sudo nova-manage project zipfile $NOVA_PROJECT $NOVA_PROJECT_USER /username/creds/novacreds.zip                </literallayout>
        </para>
        <para>Using the example project names above, you would use
            this command:</para>
        <para>
            <literallayout class="monospaced">$ sudo nova-manage project zipfile dubproject dub ~/creds/novacreds.zip</literallayout>
        </para>
        <para>If you are using one of the Flat modes for networking, you may see a Warning
            message "No vpn data for project &lt;project_name>" which you can safely
            ignore.</para>
        <para>Unzip them in your home directory, and add them to your environment. </para>
        <literallayout class="monospaced">unzip /home/username/creds/novacreds.zip -d /home/username/creds/
cat /home/username/creds/novarc >> ~/.bashrc
source ~/.bashrc                 </literallayout>
        <para>Here is an example novarc file:</para>
        <literallayout class="monospaced">NOVARC=$(readlink -f "${BASH_SOURCE:-${0}}" 2>/dev/null) ||
NOVARC=$(python -c 'import os,sys; print os.path.abspath(os.path.realpath(sys.argv[1]))' "${BASH_SOURCE:-${0}}")
NOVA_KEY_DIR=${NOVARC%/*}
export EC2_ACCESS_KEY="f376bf76-d515-4cf9-8a41-201bbbafa0aa:dubproject"
export EC2_SECRET_KEY="874f763d-cd07-4191-988a-be0ec5b86cf5"
export EC2_URL="http://192.168.206.130:8773/services/Cloud"
export S3_URL="http://192.168.206.130:3333"
export EC2_USER_ID=42 # nova does not use user id, but bundling requires it
export EC2_PRIVATE_KEY=${NOVA_KEY_DIR}/pk.pem
export EC2_CERT=${NOVA_KEY_DIR}/cert.pem
export NOVA_CERT=${NOVA_KEY_DIR}/cacert.pem
export EUCALYPTUS_CERT=${NOVA_CERT} # euca-bundle-image seems to require this set
alias ec2-bundle-image="ec2-bundle-image --cert ${EC2_CERT} --privatekey ${EC2_PRIVATE_KEY} --user 42 --ec2cert ${NOVA_CERT}"
alias ec2-upload-bundle="ec2-upload-bundle -a ${EC2_ACCESS_KEY} -s ${EC2_SECRET_KEY} --url ${S3_URL} --ec2cert ${NOVA_CERT}"
export NOVA_API_KEY="c376af76-d515-4cf9-8d41-201bbbafa0aa"
export NOVA_USERNAME="dub"
export NOVA_PROJECT_ID="dubproject"
export NOVA_URL="http://192.168.206.130:8774/v1.1/"
export NOVA_VERSION="1.1"</literallayout>
        <para>If you already have Nova credentials present in your
            environment, you can use a script included with the Image
            Service Glance, tools/nova_to_os_env.sh, to create
            Glance-style credentials. This script adds OS_AUTH
            credentials to the environment which are used by the Image
            Service to enable private images when the Identity Service
            is configured as the authentication system for Compute and
            the Image Service.</para>
        
</section>
   
</section>