<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="configure-dashboard"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Configuring the Dashboard</title>
    <para>If it's not already installed on the Dashboard server, install MySQL with:
        <literallayout class="monospaced">sudo apt-get install python-mysqldb mysql-server</literallayout></para>
    <para>During the install, you'll be prompted for the mysql root
        password. Enter a password of your choice and verify it.</para>
    <para>Start the mysql command line client by running:</para>
    <para><literallayout class="monospaced">mysql -u root -p</literallayout></para>
    <para>Enter the mysql root user's password when prompted.</para>
    <para>To configure the MySQL database, create the dash database. </para>
    <para><literallayout class="monospaced">mysql> CREATE DATABASE dash;</literallayout></para>
    <para>Create a MySQL user for the newly-created dash database that
        has full control of the database. </para>
    <para><literallayout class="monospaced">mysql> GRANT ALL ON dash.* TO 'dash'@'%' IDENTIFIED BY
        'yourpassword';</literallayout></para>
    <para>Enter quit at the mysql> prompt to exit MySQL.</para>
    <para>After configuring the local_settings.py as shown below, you can run the syncdb command to populate this newly-created database.</para>
    <para>Now you can configure the dashboard application by modifying the local_settings.py file. An example is provided that you can copy
            to local_settings.py and then modify for your environment.
        </para>
    <para>Rename the /var/lib/dash/local/local_settings.py.example
        file to local_settings.py.</para>
    <literallayout class="monospaced">sudo cp /var/lib/dash/local/local_settings.py.example /var/lib/dash/local/local_settings.py</literallayout>
    <para>In the /var/lib/dash/local/local_settings.py file, change
        these options:</para>
     <itemizedlist><listitem><para>DATABASES: Change the database section to point to the Mysql
                database named dash:</para>
    <literallayout class="monospaced">DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dash',
        'USER': 'dash',
        'PASSWORD': 'yourpassword',
        'HOST': 'localhost',
        'default-character-set': 'utf8'
    },
}</literallayout></listitem>
       <listitem>
            <para>SWIFT_ENABLED: If an Object Storage (Swift) endpoint
                is available and configured in the Identity service
                catalog, set SWIFT_ENABLED = True. </para>
        </listitem>
        <listitem>
            <para>QUANTUM_ENABLED: For now, the Network Connection
                (Quantum) service is enabled in local_settings.py, but
                the project is still in incubation for Diablo and
                should be available in the Essex release. You can
                leave the settings as-is for now.</para>
        </listitem>
        </itemizedlist>
        <para>Now that the local_settings.py file is ready, run the
        syncdb command to initialize the database. </para>
    <literallayout class="monospaced">cd /var/lib/dash
PYTHONPATH=/var/lib/dash/ python dashboard/manage.py syncdb</literallayout>
    <para>If you want to avoid a warning when restarting apache2, create a blackhole directory in the dashboard directory like so:</para>
    <literallayout class="monospaced">sudo mkdir -p /var/lib/dash/.blackhole</literallayout>
   <para>Restart Apache to pick up the default site and symbolic link settings.</para>
    <literallayout class="monospaced">sudo /etc/init.d/apache2 restart</literallayout>
    <para>Restart the nova-api service to ensure the API server can
        connect to the Dashboard and to avoid an error displayed in
        the dashboard. </para>
    <literallayout class="monospaced">sudo restart nova-api</literallayout>
</section>
