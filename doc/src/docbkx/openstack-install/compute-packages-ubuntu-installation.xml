<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="manual-ubuntu-installation"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Packaged Compute Installation with the Image and Identity
        Services</title>
    <para>The manual installation involves installing
        OpenStack Compute from packages on Ubuntu 11.04 as a
        user with root permission. Depending on your
        environment, you may need to prefix these commands
        with sudo.</para>
    <para>Our assumptions for this installation are that you
        have a base Ubuntu Server 11.04 ready. For this
        installation, use the following assumptions:</para>
    <para>
        <itemizedlist>
            <listitem>
                <para>Ensure that the server can resolve its
                    own hostname, otherwise RabbitMQ cannot
                    start.</para>
            </listitem>
            <listitem>
                <para>You need an LVM volume group called
                    "nova-volumes" to provide persistent
                    storage to guest VMs. Either create this
                    during the installation or leave some free
                    space to create it prior to installing
                    nova services.</para>
            </listitem>
            <listitem>
                <para>10.0.2.15 is the primary IP for our host
                    on eth0.</para>
            </listitem>
            <listitem>
                <para>192.168.100.0/24 as the fixed range for our
                    guest VMs, connected to the host via br100.</para>
            </listitem>
            <listitem>
                <para>FlatDHCP with a single network
                    interface.</para>
            </listitem>
            <listitem>
                <para>Ensure the operating system is
                    up-to-date by running
                    <command>apt-get
                        update</command> and
                    <command>apt-get upgrade</command>
                    prior to the installation.</para>
            </listitem>
        </itemizedlist>
    </para>
    <para>This installation process walks through installing a cloud
        controller node and a compute node using a set of packages
        that are known to work with each other. The cloud controller
        node contains all the nova- services including the API server
        and the database server. The compute node needs to run only
        the nova-compute service. You only need one nova-network
        service running in a multi-node install. You cannot install
        nova-objectstore on a different machine from nova-compute,
        although production-style deployments will use an Image
        Service (Glance) server for virtual images so you do not need
        to install nova-objectstore when using the Image
        Service.</para>
    <section xml:id="preconfiguring-the-network"><title>Pre-configuring the network</title>
        <para>These instructions are for using the FlatDHCP networking mode with a single network interface. More complex configurations are described in the networking section, but this configuration is known to work. 
        </para>
        <para>First, setup your /etc/network/interfaces file with these settings: </para>
        <itemizedlist><listitem><para>eth0: public IP, gateway</para></listitem>
            <listitem><para>br100: no ports, stp off, fd 0, first address from --fixed_range
            set in nova.conf files.</para></listitem></itemizedlist> 
        <para>Here's an example:</para>
                <para><literallayout class="monospaced">
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp
                    
# Bridge network interface for VM networks 
auto br100 
iface br100 inet static 
address 192.168.100.1 
netmask 255.255.255.0 
bridge_stp off
bridge_fd 0
                </literallayout></para>
            <para>Also install bridge-utils:</para>
        <literallayout class="monospaced">sudo apt-get install bridge-utils</literallayout>
        <para>Ensure that you set up the bridge. </para>
        <literallayout class="monospaced">sudo brctl addbr br100</literallayout>
        <para>Lastly, restart networking to have these changes take
            effect. (This method is deprecated but "<code>restart
                networking</code>" doesn't always work.)</para>
        <literallayout class="monospaced">sudo /etc/init.d/networking restart</literallayout></section>
    <section xml:id="installing-the-cloud-controller">
        <title>Installing the Cloud Controller</title>
        <para>First, you need to add a signing key for the
            Cloud Builders repository that contains packages
            that are known and tested to work together, such
            as diablo-d5 or diablo-final. Once you add the
            signing key, you add a repository entry pointing
            to it and update your repo pointer with an apt-get
            command. </para>
        <literallayout class="monospaced">sudo apt-key adv --keyserver hkp://subkeys.pgp.net --recv F87CBDE0</literallayout>
        <para>Now, create a new sources.list and add a pointer to the
            Rackspace Cloud Builders packages for a finalized Diablo
            release containing Compute, Object Storage, Image Service,
            the Dashboard, and Identity Service.</para>
        <literallayout class="monospaced">sudo nano /etc/apt/sources.list.d/rcb-sources.list           </literallayout>
        <para>Paste the following line into the newly created
            rcb-sources.list file. The options are maverick, natty, or
            oneiric for the operating system and diablo-d5 or
            diablo-final:</para>
        <literallayout class="monospaced">deb http://ops.rcb.me/packages natty diablo-final</literallayout>
        <para>Now update to pick up this repository.</para>
        <literallayout class="monospaced">sudo apt-get update</literallayout>
        <para>Install
            the messaging queue server, RabbitMQ.</para>
        <literallayout class="monospaced">sudo apt-get install rabbitmq-server</literallayout>
        <para>Now, install the Python dependencies. </para>
        <literallayout class="monospaced">sudo apt-get install python-greenlet  </literallayout>
        <para>Install the required nova- packages, and dependencies are automatically
            installed.</para>
        <literallayout class="monospaced">sudo apt-get install nova-volume nova-vncproxy nova-api nova-ajax-console-proxy nova-doc nova-scheduler 
sudo apt-get install nova-network nova-compute</literallayout>
        <para>Install the supplemental tool unzip.</para>
        <literallayout class="monospaced">sudo apt-get install unzip</literallayout>
        <para>Next set up the database, either MySQL or PostgreSQL,
            with a database named "nova" and a user named "nova"
            granting the "nova" user full access to the
            database.</para>
    </section>
    <xi:include href="compute-database-mysql.xml"/>
    <xi:include href="compute-database-postgresql.xml" />
   
    <section xml:id="minimum-configuration-settings">
        <title>Minimum Configuration Settings</title>
        <para>Many of the settings for Compute services are stored in
            the /etc/nova/nova.conf file by default. Here are the
            relevant settings for getting a minimal install running.
            Refer to the OpenStack Compute Admin Manual for guidance
            on more configuration options.</para>
        <para>Create a “nova” group, so you can set permissions on the configuration file: </para>
        <literallayout class="monospaced">sudo addgroup nova</literallayout>
        <para>The nova.config file should have its owner set to root:nova, and mode set to 0640,
            since the file contains your MySQL server’s username and password. You also want to
            ensure that the nova user belongs to the nova group.</para>
        <literallayout class="monospaced">sudo usermod -g nova nova
sudo chown -R root:nova /etc/nova
sudo chmod 640 /etc/nova/nova.conf</literallayout>
        <para>The hypervisor is set either by editing
            /etc/nova/nova.conf or referring to nova-compute.conf in
            the nova.conf file. The hypervisor defaults to "kvm", but
            if you are working within a VM already, switch to "qemu"
            on the --libvirt_type= line. </para>
        <para>Ensure the database connection defines your backend data store, for example, add "--sql_connection=mysql://[ user ]:[ pass ]@[ primary IP ]/[ db name ]".</para>
        <para>Add these settings to /etc/nova/nova.conf for the
            network configuration assumptions made for this
            installation scenario. You can place comments in the
            nova.conf file by entering a new line with a # sign at the
            beginning of the line. To see a listing of all possible
            flag settings, see the output of running /bin/nova-api
            --help.</para>                
        <literallayout class="monospaced">--network_manager=nova.network.manager.FlatDHCPManager
--fixed_range=192.168.100.0/24
--flat_network_dhcp_start=192.168.100.2
--public_interface=eth0
--flat_interface=br100</literallayout>
        <para>Your nova.conf should look like the following example
            file at this point:</para>
        <para><literallayout class="monospaced">--dhcpbridge_flagfile=/etc/nova/nova.conf  
--dhcpbridge=/usr/bin/nova-dhcpbridge
--logdir=/var/log/nova 
--state_path=/var/lib/nova
--lock_path=/var/lock/nova
--flagfile=/etc/nova/nova-compute.conf
# Leave the use_deprecated_auth when using EC2 credentials only, otherwise set to false to use the OpenStack Identity Service Keystone
--use_deprecated_auth 
--verbose
# Settings added for networking with DHCP
--network_manager=nova.network.manager.FlatDHCPManager
--fixed_range=192.168.100.0/24
--flat_network_dhcp_start=192.168.100.2
--public_interface=eth0 --flat_interface=br100
--sql_connection=mysql://nova:notnova@192.168.206.129/nova</literallayout></para>
        
        <para>This example nova.conf file points to a
            nova-compute.conf file which contains the hypervisor
            configuration information, in this case it is just
            --libvirt_type=kvm. You can remove the referral to a
            separate nova-compute.conf file and insert
            --libvirt_type=kvm into the nova.conf if you want. </para>
        <para>Create the tables in your backend data store by running
            the following command:</para>
        <literallayout class="monospaced">sudo nova-manage db sync</literallayout>
        <para>If you see any response, you can look in
            /var/log/nova/nova-manage.log to see the problem. No
            response means the command completed correctly and your
            nova database is now populated.</para>
        
        <para>On both nodes, restart all services in total, just to cover the entire
            spectrum: </para>
        <para>
            <literallayout class="monospaced">sudo restart nova-api
sudo restart nova-compute
sudo restart nova-network
sudo restart nova-scheduler
sudo restart libvirt-bin
sudo /etc/init.d/rabbitmq-server restart      </literallayout>
        </para>
        <para>All nova services are now installed. Next you
            can install and configure the Image Service,
            Glance.</para>
    </section>
    
</section>
